CMUCL introduced a type system with canonicalized type objects (structs), called ctypes.  SBCL and CCL use descendants of this system.  Type specifiers are converted into these objects with VALUES-TYPE-SPECIFIER, or just TYPE-SPECIFIER if a single-value type is expected, and these conversions are cached for efficiency.  A type object can be converted back into a specifier with SPECIFIER-TYPE, though it may not be the defining specifier due to canonicalization.  "methods" (not CLOS methods), as for type intersection or subtyping, can be defined on particular type object classes.

This all makes the type reasoning SBCL is known for a good deal more organized.  It also allows CTYPE (and subtypes like ARRAY-TYPE, etc) to be themselves types, that can be dealt with with typecase &c.

The only other implementation I've looked at (yet) is ABCL, which has nothing like this; TYPEP, SUBTYPEP and all just work directly on type specifiers.  This is a good deal simpler, but makes computing with types rather more of a pain.

I've tried to write the interface to this library to discourage users from manipulating the results of FORM-TYPE etc. as type specifiers, and going through *KINDCASE/KINDP, and accessors like NUMERIC-TYPE-HIGH, instead.  The hope is that eventually the library will be altered to work with implementation-specific type objects (or with type specifiers as now for cases like ABCL), thus taking advantage of all the facilities for them in compilers.

Eventually you'd may have functions like TYPE-INTERSECTION etc. for working with types.

See also kind-types.lisp for some effort with working with types of type specifiers.  (Sucks.)

Even more speculative stuff:

The CL type system is really pretty powerful (you can even do some super-basic pattern matchy stuff with CONS &c., not that it can even handle regular languages), but it would be moreso if types were reified objects, that could even be user-defined.  (We already have that in the CLOS subset of the type system, metaclasses and all.)  You'd just need to have methods on typep and subtypep, really, and maybe on type-intersection and type-union optionally.  Of course this would make the system even more uncomputable weird for reasoning than it already was, but hey, we already have SATISFIES.

Basically it's very based on gradual/optional/whatever types, so uncomputability isn't so bad, since we just have (for correctness)to infer things to be a supertype of their true type, and more specificity just means more efficiency, meaning say a particularly lazy implementation could say everything is T.

In any case it's something I'd like to look into to see if it's remotely sane.
