This system is basically based on SBCL's SB-C:DEFTRANSFORM, which is used for many (most?) of SBCL's important optimizations.  They're to-source transforms, but that's about where the similarity with compiler macros ends.  They run in the compiler's IR1 phase, and operate on the IR1 representation (nodes, lvars, &c., I'm not an SBCL hacker, so I don't know it that well).

This lets them take advantage of more information than compiler macros can, such as dynamically inferred (constraint) type information.

They still compute source, but unlike compiler macros what they actually return is a lambda expression (though the deftransform doesn't have to be written as such - the macro will wrap it up), to be used in place of a function in a call.  This has several advantages, like not having to worry about multiple evaluation (since the lambda expression handles it), spurious warnings (see the sbcl note in kind-types.lisp), and the possibility of replacement in something other than literal calls like compiler macros.  Like I think a transform could be triggered with (let ((foo #'something)) (apply foo ...)).

I think overall computing a lambda expression is more sensible than just rewriting the whole call form, even if it's not then used in a later compilation phase.  E.g. we can imagine

(define-compiler-hint remove-if (predicate sequence &rest keys)
    "handle COMPLEMENT"
  (unless #-magic (and (consp predicate) (eq (first predicate) 'complement) (= (length predicate 2)))
	  #+magic (and (call? predicate) (eql (call-function-name predicate) 'complement))
	  (decline-expansion))
  `(apply #'remove-if-not #-magic ,(second predicate) #+magic ,(first (call-arguments predicate))
	  sequence keys))

or something.  And this could be triggered with (apply #'remove-if (complement ...) ...), since the macro doesn't care about the rest args.

so, i'd like to discourage dealing with forms as forms, to allow for the possibility of things like call-arguments.

it would also be nice if the library could be plugged into things like deftransform.
